generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  image        String
  productCount Int       @default(0)
  featured     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]

  @@map("categories")
}

model Product {
  id             Int         @id @default(autoincrement())
  name           String
  price          Float
  originalPrice  Float?
  image          String
  images         String[]
  rating         Float       @default(0)
  reviews        Int         @default(0)
  inStock        Boolean     @default(true)
  stock          Int         @default(0)
  description    String?
  features       String[]
  specifications Json?
  categoryId     String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  cartItems      CartItem[]
  favorites      Favorite[]
  orderItems     OrderItem[]
  category       Category    @relation(fields: [categoryId], references: [id])
  productReviews Review[]

  @@map("products")
}

model User {
  id                      String     @id @default(cuid())
  email                   String     @unique
  password                String
  firstName               String
  lastName                String
  userType                UserType   @default(CUSTOMER)
  avatar                  String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  emailVerificationExpiry DateTime?
  emailVerificationToken  String?    @unique
  isEmailVerified         Boolean    @default(false)
  addresses               Address[]
  cartItems               CartItem[]
  favorites               Favorite[]
  orders                  Order[]
  reviews                 Review[]

  @@map("users")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Address {
  id        String      @id @default(cuid())
  type      AddressType
  firstName String
  lastName  String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean     @default(false)
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("addresses")
}

model Order {
  id           String      @id @default(cuid())
  status       OrderStatus @default(PENDING)
  subtotal     Float
  tax          Float
  shipping     Float
  total        Float
  userId       String
  addressId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customerInfo Json?
  items        OrderItem[]
  address      Address     @relation(fields: [addressId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  productId Int
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String
  comment   String
  helpful   Int      @default(0)
  verified  Boolean  @default(false)
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

enum UserType {
  CUSTOMER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  APPROVED
  REJECTED
}
